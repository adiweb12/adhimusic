name: Build MusicPlayer APK

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1️⃣ Checkout repo
      - name: Checkout code
        uses: actions/checkout@v4

      # 2️⃣ Set up JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      # 3️⃣ Generate Android project structure
      - name: Generate Android project
        run: |
          mkdir -p app/src/main/java/com/example/musicplayer
          mkdir -p app/src/main/res/layout
          mkdir -p app/src/main/res/values

          # MainActivity.kt
          cat <<'EOF' > app/src/main/java/com/example/musicplayer/MainActivity.kt
          package com.example.musicplayer

          import android.Manifest
          import android.content.Intent
          import android.content.pm.PackageManager
          import android.os.Build
          import android.os.Bundle
          import androidx.appcompat.app.AppCompatActivity
          import androidx.core.app.ActivityCompat
          import androidx.recyclerview.widget.LinearLayoutManager
          import androidx.recyclerview.widget.RecyclerView
          import android.provider.MediaStore

          class MainActivity : AppCompatActivity() {
              private lateinit var recyclerView: RecyclerView
              private var songs: List<Pair<String, String>> = listOf()

              override fun onCreate(savedInstanceState: Bundle?) {
                  super.onCreate(savedInstanceState)
                  setContentView(R.layout.activity_main)

                  recyclerView = findViewById(R.id.recyclerView)
                  recyclerView.layoutManager = LinearLayoutManager(this)

                  requestStoragePermission()
              }

              private fun requestStoragePermission() {
                  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
                      ActivityCompat.requestPermissions(
                          this,
                          arrayOf(Manifest.permission.READ_MEDIA_AUDIO),
                          100
                      )
                  } else {
                      ActivityCompat.requestPermissions(
                          this,
                          arrayOf(Manifest.permission.READ_EXTERNAL_STORAGE),
                          100
                      )
                  }
              }

              override fun onRequestPermissionsResult(
                  requestCode: Int,
                  permissions: Array<out String>,
                  grantResults: IntArray
              ) {
                  super.onRequestPermissionsResult(requestCode, permissions, grantResults)
                  if (requestCode == 100 && grantResults.isNotEmpty() && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                      loadSongs()
                  }
              }

              private fun loadSongs() {
                  val tempList = mutableListOf<Pair<String, String>>()
                  val projection = arrayOf(
                      MediaStore.Audio.Media.TITLE,
                      MediaStore.Audio.Media.DATA
                  )
                  val selection = MediaStore.Audio.Media.IS_MUSIC + "!= 0"
                  val cursor = contentResolver.query(
                      MediaStore.Audio.Media.EXTERNAL_CONTENT_URI,
                      projection,
                      selection,
                      null,
                      MediaStore.Audio.Media.TITLE + " ASC"
                  )
                  cursor?.use {
                      val titleIndex = it.getColumnIndexOrThrow(MediaStore.Audio.Media.TITLE)
                      val dataIndex = it.getColumnIndexOrThrow(MediaStore.Audio.Media.DATA)
                      while (it.moveToNext()) {
                          val title = it.getString(titleIndex)
                          val path = it.getString(dataIndex)
                          tempList.add(Pair(title, path))
                      }
                  }
                  songs = tempList
                  recyclerView.adapter = MusicAdapter(songs.map { it.first }) { songTitle ->
                      val path = songs.first { it.first == songTitle }.second
                      val intent = Intent(this, PlayerService::class.java).apply {
                          action = "PLAY"
                          putExtra("SONG_PATH", path)
                      }
                      startService(intent)
                  }
              }
          }
          EOF

          # MusicAdapter.kt
          cat <<'EOF' > app/src/main/java/com/example/musicplayer/MusicAdapter.kt
          package com.example.musicplayer

          import android.view.LayoutInflater
          import android.view.View
          import android.view.ViewGroup
          import android.widget.TextView
          import androidx.recyclerview.widget.RecyclerView

          class MusicAdapter(
              private val songs: List<String>,
              private val onClick: (String) -> Unit
          ) : RecyclerView.Adapter<MusicAdapter.MusicViewHolder>() {

              class MusicViewHolder(view: View) : RecyclerView.ViewHolder(view) {
                  val title: TextView = view.findViewById(R.id.textTitle)
              }

              override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): MusicViewHolder {
                  val view = LayoutInflater.from(parent.context)
                      .inflate(R.layout.item_music, parent, false)
                  return MusicViewHolder(view)
              }

              override fun onBindViewHolder(holder: MusicViewHolder, position: Int) {
                  val song = songs[position]
                  holder.title.text = song
                  holder.itemView.setOnClickListener { onClick(song) }
              }

              override fun getItemCount(): Int = songs.size
          }
          EOF

          # PlayerService.kt
          cat <<'EOF' > app/src/main/java/com/example/musicplayer/PlayerService.kt
          package com.example.musicplayer

          import android.app.Service
          import android.content.Intent
          import android.media.MediaPlayer
          import android.os.IBinder

          class PlayerService : Service() {
              private var mediaPlayer: MediaPlayer? = null

              override fun onStartCommand(intent: Intent?, flags: Int, startId: Int): Int {
                  if (intent?.action == "PLAY") {
                      val path = intent.getStringExtra("SONG_PATH")
                      mediaPlayer?.release()
                      if (path != null) {
                          mediaPlayer = MediaPlayer().apply {
                              setDataSource(path)
                              prepare()
                              start()
                          }
                      }
                  }
                  return START_STICKY
              }

              override fun onDestroy() {
                  mediaPlayer?.release()
                  mediaPlayer = null
                  super.onDestroy()
              }

              override fun onBind(intent: Intent?): IBinder? = null
          }
          EOF

          # AndroidManifest.xml
          cat <<'EOF' > app/src/main/AndroidManifest.xml
          <manifest xmlns:android="http://schemas.android.com/apk/res/android">

              <uses-permission android:name="android.permission.READ_MEDIA_AUDIO"/>
              <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"/>
              <uses-permission android:name="android.permission.FOREGROUND_SERVICE"/>

              <application
                  android:allowBackup="true"
                  android:label="MusicPlayer"
                  android:supportsRtl="true"
                  android:theme="@style/Theme.MusicPlayer">

                  <activity
                      android:name=".MainActivity"
                      android:exported="true">
                      <intent-filter>
                          <action android:name="android.intent.action.MAIN"/>
                          <category android:name="android.intent.category.LAUNCHER"/>
                      </intent-filter>
                  </activity>

                  <service
                      android:name=".PlayerService"
                      android:foregroundServiceType="mediaPlayback"/>
              </application>
          </manifest>
          EOF

          # Layouts
          cat <<'EOF' > app/src/main/res/layout/activity_main.xml
          <LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
              android:layout_width="match_parent"
              android:layout_height="match_parent"
              android:orientation="vertical">

              <androidx.recyclerview.widget.RecyclerView
                  android:id="@+id/recyclerView"
                  android:layout_width="match_parent"
                  android:layout_height="match_parent"/>
          </LinearLayout>
          EOF

          cat <<'EOF' > app/src/main/res/layout/item_music.xml
          <LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
              android:layout_width="match_parent"
              android:layout_height="wrap_content"
              android:orientation="vertical"
              android:padding="12dp">

              <TextView
                  android:id="@+id/textTitle"
                  android:layout_width="match_parent"
                  android:layout_height="wrap_content"
                  android:text="Song Title"
                  android:textSize="18sp"
                  android:textStyle="bold"
                  android:textColor="@android:color/black"/>
          </LinearLayout>
          EOF

          # Values
          cat <<'EOF' > app/src/main/res/values/strings.xml
          <resources>
              <string name="app_name">MusicPlayer</string>
          </resources>
          EOF

          cat <<'EOF' > app/src/main/res/values/colors.xml
          <resources>
              <color name="black">#000000</color>
              <color name="white">#FFFFFF</color>
          </resources>
          EOF

          cat <<'EOF' > app/src/main/res/values/themes.xml
          <resources xmlns:tools="http://schemas.android.com/tools">
              <style name="Theme.MusicPlayer" parent="Theme.MaterialComponents.DayNight.DarkActionBar">
                  <item name="colorPrimary">@color/black</item>
                  <item name="colorOnPrimary">@color/white</item>
              </style>
          </resources>
          EOF

          # Gradle files
          cat <<'EOF' > settings.gradle
          rootProject.name = "MusicPlayer"
          include ':app'
          EOF

          cat <<'EOF' > gradle.properties
          android.useAndroidX=true
          android.enableJetifier=true
          EOF

          cat <<'EOF' > build.gradle
          buildscript {
              repositories { google(); mavenCentral() }
              dependencies {
                  classpath "com.android.tools.build:gradle:8.7.0"
                  classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:2.0.21"
              }
          }
          allprojects { repositories { google(); mavenCentral() } }
          EOF

          cat <<'EOF' > app/build.gradle
          apply plugin: 'com.android.application'
          apply plugin: 'kotlin-android'

          android {
              namespace "com.example.musicplayer"
              compileSdk 34

              defaultConfig {
                  applicationId "com.example.musicplayer"
                  minSdk 24
                  targetSdk 34
                  versionCode 1
                  versionName "1.0"
              }

              compileOptions {
                  sourceCompatibility JavaVersion.VERSION_17
                  targetCompatibility JavaVersion.VERSION_17
              }

              kotlinOptions {
                  jvmTarget = "17"
              }

              buildTypes {
                  release {
                      minifyEnabled false
                      proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
                  }
              }
          }

          dependencies {
              implementation "org.jetbrains.kotlin:kotlin-stdlib:2.0.21"
              implementation "androidx.core:core-ktx:1.13.1"
              implementation "androidx.appcompat:appcompat:1.7.0"
              implementation "com.google.android.material:material:1.12.0"
              implementation "androidx.recyclerview:recyclerview:1.3.2"
          }
          EOF

      # 4️⃣ Set up Gradle wrapper (must be 8.9+)
      - name: Set up Gradle wrapper
        run: gradle wrapper --gradle-version 8.10

      # 5️⃣ Build APK
      - name: Build APK
        run: ./gradlew assembleDebug

      # 6️⃣ Upload APK artifact
      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: MusicPlayer-APK
          path: app/build/outputs/apk/debug/app-debug.apk
